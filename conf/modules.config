/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

}

//TODO: change the setup
process {
    withName: GENERATE_PROTEINS_FROM_VCF {
        ext.args    = [
            "-t ${params.variant_annotation_style}",
            "-r ${params.variant_reference}",
            params.variant_indel_filter ? "-fINDEL" : "",
            params.variant_frameshift_filter ? "-fFS" : "",
            params.variant_snp_filter ? "-fSNP" : ""
            ]
        publishDir  = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: '*.fasta'
        ]
    }

    withName: OPENMS_MAPALIGNERIDENTIFICATION {
        ext.args    = [
            "-model:type linear",
            "-algorithm:max_rt_shift ${params.max_rt_alignment_shift}"
            ]
        publishDir  = [ enabled: false ]
    }

    withName: OPENMS_COMETADAPTER {
        ext.args    = [
            "-precursor_mass_tolerance ${params.precursor_mass_tolerance}",
            "-fragment_mass_tolerance ${params.fragment_mass_tolerance}",
            "-fragment_bin_offset ${params.fragment_bin_offset}",
            "-num_hits ${params.num_hits}",
            "-digest_mass_range ${params.digest_mass_range}",
            "-max_variable_mods_in_peptide ${params.number_mods}",
            "-missed_cleavages 0",
            "-precursor_charge ${params.prec_charge}",
            "-activation_method ${params.activation_method}", 
            "-variable_modifications ${params.variable_mods.tokenize(',').collect { "'${it}'" }.join(" ") }",
            "-fixed_modifications ${params.fixed_mods.tokenize(',').collect { "'${it}'"}.join(" ")}",
            "-enzyme '${params.enzyme}'",
            "-spectrum_batch_size ${params.spectrum_batch_size}",
            params.use_x_ions ? "-use_X_ions true" : "",
            params.use_z_ions ? "-use_Z_ions true" : "",
            params.use_a_ions ? "-use_A_ions true" : "",
            params.use_c_ions ? "-use_C_ions true" : "",
            params.use_NL_ions ? "-use_NL_ions true" : "",
            params.remove_precursor_peak ? "-remove_precursor_peak yes" : ""
        ]
        publishDir  = [ enabled: false ]
    }

    withName: OPENMS_IDFILTER_FOR_ALIGNMENT {
        ext.args    = [
            "-remove_decoys",
            "-precursor:length '${params.peptide_min_length}:${params.peptide_max_length}'",
            "-delete_unreferenced_peptide_hits",
            (params.fdr_threshold == '0.01') ? "-score:pep 0.05" : "-score:pep " + params.fdr_threshold
        ]
        publishDir  = [
            path: { "${params.outdir}/Intermediate_Results" },
            mode: 'copy',
            pattern: '*.idXML'
        ]
    }

    withName: OPENMS_IDFILTER_REFINED {
        ext.args    = [
            "-remove_decoys",
            "-precursor:length '${params.peptide_min_length}:${params.peptide_max_length}'",
            "-delete_unreferenced_peptide_hits",
            (params.fdr_threshold == '0.01') ? "-score:pep 0.05" : "-score:pep " + params.fdr_threshold
        ]
        publishDir  = [
            path: { "${params.outdir}/Intermediate_Results" },
            mode: 'copy',
            pattern: '*.idXML'
        ]
    }

    withName: OPENMS_IDFILTER_Q_VALUE {
        ext.suffix  = { "${meta.id}_filtered" }
        ext.args    = [
            "-remove_decoys",
            "-precursor:length '${params.peptide_min_length}:${params.peptide_max_length}'",
            "-delete_unreferenced_peptide_hits",
            (params.fdr_threshold == '0.01') ? "-score:pep 0.05" : "-score:pep " + params.fdr_threshold
        ]
        publishDir  = [
            path: { "${params.outdir}/Intermediate_Results" },
            mode: 'copy',
            pattern: '*.idXML'
        ]
    }

    withName: OPENMS_IDFILTER_PSMS {
        ext.suffix  = { "${meta.id}_pred_filtered" }
        ext.args    = [
            "-whitelist:ignore_modifications",
            "-whitelist:peptides"
        ]
        publishDir  = [
            path: { "${params.outdir}/Intermediate_Results" },
            mode: 'copy',
            pattern: '*.idXML'
        ]
    }

    withName: OPENMS_MZTABEXPORTERPERC {
        ext.suffix  = { "${meta.sample}_${meta.condition}_all_ids_merged_psm_perc_filtered" }
        publishDir  = [
            path: { "${params.outdir}/Intermediate_Results" },
            mode: 'copy',
            pattern: '*.mzTab'
        ]
    }

    withName: OPENMS_MZTABEXPORTERPSM {
        ext.suffix  = { "${meta.sample}_${meta.condition}_all_ids_merged" }
        publishDir  = [
            path: { "${params.outdir}/Intermediate_Results" },
            mode: 'copy',
            pattern: '*.mzTab'
        ]
    }

    withName: OPENMS_PERCOLATORADAPTER {
        ext.suffix  = { "${meta.id}_all_ids_merged_psm_perc" }
        ext.args    = [
            "-seed 4711",
            "-trainFDR 0.05",
            "-testFDR 0.05",
            "-enzyme no_enzyme",
            "-subset_max_train ${params.subset_max_train}",
            "-doc ${params.description_correct_features} ", 
            (params.fdr_level != 'psm-level-fdrs') ? "-" + params.fdr_level : ""
        ]
        publishDir  = [
            path: { "${params.outdir}/Intermediate_Results" },
            mode: 'copy',
            pattern: '*.idXML'
        ]
    }

    withName: OPENMS_PERCOLATORADAPTER_KLAMMER {
        ext.suffix  = { "${meta.id}_all_ids_merged_psm_perc" }
        ext.args    = [
            "-seed 4711",
            "-trainFDR 0.05",
            "-testFDR 0.05",
            "-enzyme no_enzyme",
            "-subset_max_train ${params.subset_max_train}",
            "-doc ${params.description_correct_features} ", 
            (params.fdr_level != 'psm-level-fdrs') ? "-" + params.fdr_level : "", 
            "-klammer"
        ]
        publishDir  = [
            path: { "${params.outdir}/Intermediate_Results" },
            mode: 'copy',
            pattern: '*.idXML'
        ]
    }       

    withName: REFINE_FDR_ON_PREDICTED_SUBSET:OPENMS_PERCOLATORADAPTER {
        ext.suffix  = { "${meta.id}_perc_subset" }
        ext.args    = [
            "-seed 4711",
            "-trainFDR 0.05",
            "-testFDR 0.05",
            "-enzyme no_enzyme",
            "-subset_max_train ${params.subset_max_train}",
            "-doc ${params.description_correct_features} ", 
            (params.fdr_level != 'psm-level-fdrs') ? "-" + params.fdr_level : ""
        ]
        publishDir  = [
            path: { "${params.outdir}/Intermediate_Results" },
            mode: 'copy',
            pattern: '*.idXML'
        ]
    }

    withName: OPENMS_RTPREDICT_FOUND_PEPTIDES {
        ext.suffix  = { "${meta.sample}_id_files_for_rt_prediction_RTpredicted" }
        publishDir  = [
            path: { "${params.outdir}/RT_prediction" },
            mode: 'copy',
            pattern: '*.csv'
        ]
    }

    withName: OPENMS_RTPREDICT_NEOEPITOPES {
        ext.suffix  = { "${meta.sample}_txt_file_for_rt_prediction_RTpredicted" }
        publishDir  = [
            path: { "${params.outdir}/RT_prediction" },
            mode: 'copy',
            pattern: '*.csv'
        ]
    }
}