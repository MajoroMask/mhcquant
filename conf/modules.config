/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

}

process {

    withName: GENERATE_PROTEINS_FROM_VCF {
        ext.args    = [
            "-t ${params.variant_annotation_style}",
            "-r ${params.variant_reference}"
            ].join(' ').trim()
        publishDir  = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: '*.fasta'
        ]
    }

    withName: OPENMS_MAPALIGNERIDENTIFICATION {
        ext.args    = [
            "-model:type linear",
            "-algorithm:max_rt_shift ${params.max_rt_alignment_shift}"
            ].join(' ').trim()
        publishDir  = [ enabled: false ]
    }

    withName: OPENMS_COMETADAPTER {
        ext.args    = [
            "-precursor_mass_tolerance ${params.precursor_mass_tolerance}",
            "-fragment_mass_tolerance ${params.fragment_mass_tolerance}",
            "-fragment_bin_offset ${params.fragment_bin_offset}",
            "-num_hits ${params.num_hits}",
            "-digest_mass_range ${params.digest_mass_range}",
            "-max_variable_mods_in_peptide ${params.number_mods}",
            "-missed_cleavages 0",
            "-precursor_charge ${params.prec_charge}",
            "-activation_method ${params.activation_method}",
            "-variable_modifications ${params.variable_mods.tokenize(',').collect { "'${it}'" }.join(" ") }",
            "-enzyme '${params.enzyme}'",
            "-spectrum_batch_size ${params.spectrum_batch_size}"
        ].join(' ').trim()
        publishDir  = [ enabled: false ]
    }

    withName: OPENMS_IDFILTER_FOR_ALIGNMENT {
        ext.args    = [
            "-remove_decoys",
            "-precursor:length '${params.peptide_min_length}:${params.peptide_max_length}'",
            "-delete_unreferenced_peptide_hits",
            (params.fdr_threshold == '0.01') ? "-score:pep 0.05" : "-score:pep " + params.fdr_threshold
        ].join(' ').trim()
        publishDir  = [
            path: { "${params.outdir}/Intermediate_Results" },
            mode: 'copy',
            pattern: '*.idXML'
        ]
    }

    withName: OPENMS_IDFILTER_Q_VALUE {
        ext.suffix  = { "filtered" }
        ext.args    = [
            "-remove_decoys",
            "-precursor:length '${params.peptide_min_length}:${params.peptide_max_length}'",
            "-delete_unreferenced_peptide_hits",
            (params.fdr_threshold == '0.01') ? "-score:pep 0.05" : "-score:pep " + params.fdr_threshold
        ].join(' ').trim()
        publishDir  = [
            path: { "${params.outdir}/Intermediate_Results" },
            mode: 'copy',
            pattern: '*.idXML'
        ]
    }
    
    withName: OPENMS_PERCOLATORADAPTER {
        ext.suffix  = { "all_ids_merged_psm_perc" }
        ext.args    = [
            "-seed 4711",
            "-trainFDR 0.05",
            "-testFDR 0.05",
            "-enzyme no_enzyme",
            "-subset_max_train ${params.subset_max_train}",
            "-doc ${params.description_correct_features} ",
            (params.fdr_level != 'psm-level-fdrs') ? "-" + params.fdr_level : ""
        ].join(' ').trim()
        publishDir  = [
            path: { "${params.outdir}/Intermediate_Results" },
            mode: 'copy',
            pattern: '*.idXML'
        ]
    }

    withName: OPENMS_PERCOLATORADAPTER_KLAMMER {
        ext.suffix  = { "all_ids_merged_psm_perc" }
        ext.args    = [
            "-seed 4711",
            "-trainFDR 0.05",
            "-testFDR 0.05",
            "-enzyme no_enzyme",
            "-subset_max_train ${params.subset_max_train}",
            "-doc ${params.description_correct_features} ",
            (params.fdr_level != 'psm-level-fdrs') ? "-" + params.fdr_level : "",
            "-klammer"
        ]
        publishDir  = [
            path: { "${params.outdir}/Intermediate_Results" },
            mode: 'copy',
            pattern: '*.idXML'
        ]
    }

    withName: OPENMS_PSMFEATUREEXTRACTOR {
       publishDir  = [
           path: { "${params.outdir}/Intermediate_Results" },
           mode: 'copy',
           pattern: '*.idXML'
        ]
    }

    withName: 'OPENMS_DECOYDATABASE|OPENMS_THERMORAWFILEPARSER|OPENMS_PEAKPICKERHIRES|OPENMS_PEPTIDEINDEXER|OPENMS_FALSEDISCOVERYRATE|OPENMS_IDMERGER|OPENMS_MAPRTTRANSFORMER.*ML|OPENMS_FEATURE.*|OPENMS_IDCONFLICTRESOLVER|OPENMS_MZTABEXPORTER' {
        publishDir       = [ enabled: false ]
    }

    withName: 'OPENMS_TEXTEXPORTER' {
        publishDir  = [
            path: { "${params.outdir}/" },
            mode: 'copy',
            pattern: '*.tsv'
 ]
    }

}


// Refine on predicted subset
process {

    if ( params.refine_fdr_on_predicted_subset && params.predict_class_1 ) {
        withName: OPENMS_MZTABEXPORTERPERC {
            ext.suffix  = { "all_ids_merged_psm_perc_filtered" }
            publishDir  = [
                path: { "${params.outdir}/Intermediate_Results" },
                mode: 'copy',
                pattern: '*.mzTab'
            ]
        }

        withName: OPENMS_MZTABEXPORTERPSM {
            ext.suffix  = { "all_ids_merged" }
            publishDir  = [
                path: { "${params.outdir}/Intermediate_Results" },
                mode: 'copy',
                pattern: '*.mzTab'
            ]
        }

        withName: MHCFLURRY_PREDICTPSMS {
            publishDir       = [ enabled: false ]
        }

        withName: REFINE_FDR_ON_PREDICTED_SUBSET:OPENMS_PERCOLATORADAPTER {
            ext.suffix  = { "perc_subset" }
            ext.args    = [
                "-seed 4711",
                "-trainFDR 0.05",
                "-testFDR 0.05",
                "-enzyme no_enzyme",
                "-subset_max_train ${params.subset_max_train}",
                "-doc ${params.description_correct_features} ",
                (params.fdr_level != 'psm-level-fdrs') ? "-" + params.fdr_level : ""
            ].join(' ').trim()
            publishDir  = [
                path: { "${params.outdir}/Intermediate_Results" },
                mode: 'copy',
                pattern: '*.idXML'
            ]
        }

        withName: OPENMS_IDFILTER_PSMS {
            ext.suffix  = { "pred_filtered" }
            ext.args    = [
                "-whitelist:ignore_modifications",
                "-whitelist:peptides"
            ].join(' ').trim()
            publishDir  = [
                path: { "${params.outdir}/Intermediate_Results" },
                mode: 'copy',
                pattern: '*.idXML'
            ]
        }

        withName: OPENMS_IDFILTER_REFINED {
            ext.args    = [
                "-remove_decoys",
                "-precursor:length '${params.peptide_min_length}:${params.peptide_max_length}'",
                "-delete_unreferenced_peptide_hits",
                (params.fdr_threshold == '0.01') ? "-score:pep 0.05" : "-score:pep " + params.fdr_threshold
            ].join(' ').trim()
            publishDir  = [
                path: { "${params.outdir}/Intermediate_Results" },
                mode: 'copy',
                pattern: '*.idXML'
            ]
        }
    }
}

// Class I prediction
process {

    if ( params.predict_class_1  & !params.skip_quantification ) {
        withName: MHCFLURRY_PREDICTPEPTIDESCLASS1 {
            publishDir  = [
                path: { "${params.outdir}/class_1_bindings" },
                mode: 'copy',
                pattern: '*.fasta'
            ]
        }
    }

    if ( params.predict_class_1  & !params.skip_quantification & params.include_proteins_from_vcf ) {
        withName: PREDICT_POSSIBLE_NEOEPITOPES {
            publishDir = [
            path: {"${params.outdir}/"},
            mode: 'copy',
            pattern: '*.csv'
            ]
        }

        withName: RESOLVE_FOUND_NEOEPITOPES {
            publishDir = [
                path: {"${params.outdir}/class_1_bindings"},
                mode: 'copy',
                pattern: '*.csv'
            ]
        }

        withName: MHCFLURRY_PREDICTNEOEPITOPESCLASS1 {
            publishDir = [
                path: {"${params.outdir}/class_1_bindings"},
                mode: 'copy',
                pattern: '*.csv'
            ]
        }
    }
}

// Class II prediction
process {

    if ( params.predict_class_2 & !params.skip_quantification ) {

        withName: MHCNUGGETS_PEPTIDESCLASS2PRE {
            publishDir  = [
                path: { "${params.outdir}/class_2_bindings" },
                mode: 'copy',
                pattern: '*_peptides'
            ]
        }

        withName: MHCNUGGETS_PREDICTPEPTIDESCLASS2 {
            publishDir  = [
                path: { "${params.outdir}/class_2_bindings" },
                mode: 'copy',
                pattern: '*_class_2'
            ]
        }

        withName: MHCNUGGETS_PEPTIDESCLASS2POST {
            publishDir  = [
                path: { "${params.outdir}/class_2_bindings" },
                mode: 'copy',
                pattern: '*.csv'
            ]
        }
    }

    if ( params.predict_class_2  & !params.skip_quantification & params.include_proteins_from_vcf ) {

        withName: PREDICT_POSSIBLE_CLASS_2_NEOEPITOPES {
            publishDir  = [
                path: { "${params.outdir}" },
                mode: 'copy',
                pattern: '*.csv'
            ]
        }

        withName: RESOLVE_FOUND_CLASS_2_NEOEPITOPES {
            publishDir  = [
                path: { "${params.outdir}/class_2_bindings" },
                mode: 'copy',
                pattern: '*.csv'
            ]
        }

        withName: MHCNUGGETS_NEOEPITOPESCLASS2PRE {
            ext.suffix  = { "mhcnuggets_preprocessed" }
            publishDir  = [
                path: { "${params.outdir}/class_2_bindings" },
                mode: 'copy',
                pattern: '*${ext.suffix}'
            ]
        }

        withName: MHCNUGGETS_PREDICTNEOEPITOPESCLASS2 {
            ext.suffix  = { "predicted_neoepitopes_class_2" }
            publishDir  = [
                path: { "${params.outdir}/class_2_bindings" },
                mode: 'copy',
                pattern: '*${ext.suffix}'
            ]
        }

        withName: MHCNUGGETS_NEOEPITOPESCLASS2POST {
            publishDir  = [
                path: { "${params.outdir}/class_2_bindings" },
                mode: 'copy',
                pattern: '*.csv'
            ]
        }
    }
}

process {

    if ( params.predict_RT ) {

        withName: OPENMS_RTMODEL {
            publishDir       = [ enabled: false ]
        }

        withName: OPENMS_RTPREDICT_FOUND_PEPTIDES {
            ext.suffix = { "id_files_for_rt_prediction_RTpredicted" }
            publishDir  = [
                path: { "${params.outdir}/RT_prediction" },
                mode: 'copy',
                pattern: '*.csv'
            ]
        }

        withName: OPENMS_RTPREDICT_NEOEPITOPES {
            ext.suffix = { "txt_file_for_rt_prediction_RTpredicted" }
            publishDir  = [
                path: { "${params.outdir}/RT_prediction" },
                mode: 'copy',
                pattern: '*.csv'
            ]
        }
    }
}
