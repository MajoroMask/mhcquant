/*
 * -------------------------------------------------
 *  nf-core/mhcquant Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

    // Workflow flags
    help                            = false
    input                           = "sample_sheet.tsv"
    outdir                          = './results'
    fasta                           = "data/*.fasta"
    publish_dir_mode = 'copy'

    // Workflow options
    allele_sheet                    = false
    include_proteins_from_vcf       = false
    predict_class_1                 = false
    predict_class_2                 = false
    refine_fdr_on_predicted_subset  = false
    schema_ignore_params            = 'genomes,input_paths'
    skip_decoy_generation           = false
    subset_affinity_threshold       = 500
    variant_annotation_style        = "SNPEFF"
    variant_frameshift_filter       = false
    variant_indel_filter            = false
    variant_reference               = "GRCH38"
    variant_snp_filter              = false

    // Workflow defaults
    activation_method               = 'ALL'
    description_correct_features    = 0
    digest_mass_range               = "800:2500"
    enzyme                          = 'unspecific cleavage'
    fdr_threshold                   = 0.01
    fdr_level                       = 'peptide-level-fdrs'
    fixed_mods                      = ''
    fragment_bin_offset             = 0
    fragment_mass_tolerance         = 0.02
    klammer                         = false
    max_rt_alignment_shift          = 300
    number_mods                     = 3
    num_hits                        = 1
    peptide_min_length              = 8
    peptide_max_length              = 12
    pick_ms_levels                  = 2
    predict_RT                      = false
    prec_charge                     = '2:3'
    precursor_mass_tolerance        = 5
    quantification_fdr              = false
    quantification_min_prob         = 0
    refine_fdr_on_predicted_subset  = false
    remove_precursor_peak           = false
    run_centroidisation             = false
    skip_quantification             = false
    spectrum_batch_size             = 500
    subset_max_train                = 0
    tracedir                        = "${params.outdir}/pipeline_info"
    use_x_ions                      = false
    use_z_ions                      = false
    use_a_ions                      = false
    use_c_ions                      = false
    use_NL_ions                     = false
    variable_mods                   = 'Oxidation (M)'
    vcf_sheet                       = false

    // Boilerplate options
    email                           = false
    email_on_fail                   = false
    enable_conda                    = false
    max_multiqc_email_size          = '25.MB'
    monochrome_logs                 = false
    multiqc_config                  = false
    plaintext_email                 = false
    publish_dir_mode                = 'copy'
    show_hidden_params              = true
    skip_multiqc                    = true
    tracedir                        = "${params.outdir}/pipeline_info"
    validate_params                 = true

    // Config options
    custom_config_version           = 'master'
    custom_config_base              = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    hostnames                       = [:]
    config_profile_name             = false
    config_profile_description      = false
    config_profile_contact          = false
    config_profile_url              = false
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/mhcquant custom config
try {
    includeConfig "${params.custom_config_base}/pipeline/mhcquant.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/mhcquant profiles: ${params.custom_config_base}/pipeline/mhcquant.config")
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda         = true
        docker.enabled              = false
        singularity.enabled         = false
        podman.enabled              = false
        shifter.enabled             = false
        charliecloud.enabled        = false
    }
    docker {
        docker.enabled              = true
        docker.userEmulation        = true
        singularity.enabled         = false
        podman.enabled              = false
        shifter.enabled             = false
        charliecloud.enabled        = false
        // Avoid this error:
        //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
        // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
        // once this is established and works well, nextflow might implement this behavior as new default.
        // NOTE: This breaks MHCFlurry!
        // docker.runOptions = '-u \$(id -u):\$(id -g)'
    }
    singularity {
        singularity.enabled         = true
        singularity.autoMounts      = true
        docker.enabled              = false
        podman.enabled              = false
        shifter.enabled             = false
        charliecloud.enabled        = false
    }
    podman {
        podman.enabled              = true
        docker.enabled              = false
        singularity.enabled         = false
        shifter.enabled             = false
        charliecloud.enabled        = false
    }
    shifter {
        shifter.enabled             = true
        docker.enabled              = false
        singularity.enabled         = false
        podman.enabled              = false
        charliecloud.enabled        = false
    }
    charliecloud {
        charliecloud.enabled        = true
        docker.enabled              = false
        singularity.enabled         = false
        podman.enabled              = false
        shifter.enabled             = false
    }
    test { includeConfig 'conf/test.config' }
    test_full { includeConfig 'conf/test_full.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER = "/.Rprofile"
    R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name = 'nf-core/mhcquant'
    author = 'Leon Bichmann'
    homePage = 'https://github.com/nf-core/mhcquant'
    description = 'Identify and quantify peptides from mass spectrometry raw data'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.04.0'
    version = '2.0.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
